definitions:
  emailmodel.EmailRequest:
    properties:
      body:
        type: string
      subject:
        type: string
      to:
        type: string
    required:
    - body
    - subject
    - to
    type: object
  emailmodel.EmailResponsePortfolio:
    properties:
      email:
        type: string
      message:
        type: string
      name:
        type: string
    required:
    - email
    - message
    - name
    type: object
  emailmodel.MultipleEmailRequest:
    properties:
      body:
        type: string
      listRecipient:
        items:
          properties:
            email:
              type: string
            name:
              type: string
          required:
          - email
          - name
          type: object
        type: array
      subject:
        type: string
    required:
    - body
    - listRecipient
    - subject
    type: object
  model.CreateUserResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserResponse'
      status:
        type: string
    type: object
  model.DeleteUserResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.GetUserResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserResponse'
      status:
        type: string
    type: object
  model.ListUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.UserResponse'
        type: array
      metadata:
        $ref: '#/definitions/model.PaginationMetadata'
      status:
        type: string
    type: object
  model.LoginAPIResponse:
    properties:
      data:
        $ref: '#/definitions/model.LoginResponse'
      status:
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.LoginResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.PaginationMetadata:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  model.UpdateUserResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserResponse'
      status:
        type: string
    type: object
  model.UserCreate:
    properties:
      avatar:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - client
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  model.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  model.UserUpdate:
    properties:
      avatar:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample hub service API.
  title: Hub Service API
  version: "1.0"
paths:
  /api/email/multiple:
    post:
      consumes:
      - application/json
      description: Send emails to multiple recipients
      parameters:
      - description: List of email data
        in: body
        name: emails
        required: true
        schema:
          $ref: '#/definitions/emailmodel.MultipleEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
      summary: Send multiple emails
      tags:
      - email
  /api/email/response-portfolio:
    post:
      consumes:
      - application/json
      description: Send a response email for portfolio inquiry
      parameters:
      - description: Response data
        in: body
        name: response
        required: true
        schema:
          $ref: '#/definitions/emailmodel.EmailResponsePortfolio'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
      summary: Response to portfolio inquiry
      tags:
      - email
  /api/email/single:
    post:
      consumes:
      - application/json
      description: Send an email to a single recipient
      parameters:
      - description: Email data
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/emailmodel.EmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
      summary: Send a single email
      tags:
      - email
  /api/users:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination, sorting, and search
      parameters:
      - description: 'Page number (minimum: 1, default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of items per page (minimum: 1, maximum: 100, default:
          10)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: created_at
        description: Sort by field (name, email, created_at, updated_at)
        enum:
        - name
        - email
        - created_at
        - updated_at
        in: query
        name: sort_by
        type: string
      - default: desc
        description: Sort order (asc, desc)
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      - description: Search by name or email (case-insensitive)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns users list with pagination metadata
          schema:
            $ref: '#/definitions/model.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with email, password and name
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DeleteUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /api/users/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to get access token
      parameters:
      - description: Login credentials
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginAPIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: User login
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and your token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
