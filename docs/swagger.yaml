definitions:
  common.AppError:
    properties:
      key:
        type: string
      log:
        type: string
      message:
        type: string
      root_err: {}
      status_code:
        type: integer
    type: object
  common.Paging:
    properties:
      cursor:
        type: string
      limit:
        type: integer
      next_cursor:
        type: string
      page:
        type: integer
      total:
        type: integer
    type: object
  common.Response:
    properties:
      data: {}
      status:
        example: success
        type: string
    type: object
  emailmodel.EmailRequest:
    properties:
      body:
        type: string
      subject:
        type: string
      to:
        type: string
    required:
    - body
    - subject
    - to
    type: object
  emailmodel.EmailResponsePortfolio:
    properties:
      email:
        type: string
      message:
        type: string
      name:
        type: string
    required:
    - email
    - message
    - name
    type: object
  emailmodel.MultipleEmailRequest:
    properties:
      body:
        type: string
      listRecipient:
        items:
          properties:
            email:
              type: string
            name:
              type: string
          required:
          - email
          - name
          type: object
        type: array
      subject:
        type: string
    required:
    - body
    - listRecipient
    - subject
    type: object
  hub-service_module_challenge_model.Challenge:
    description: Contains the details of a translation challenge.
    properties:
      category:
        example: work
        type: string
      content:
        example: Hello, world!
        type: string
      created_at:
        type: string
      difficulty:
        example: easy
        type: string
      id:
        example: 62b4c3789196e8a159933552
        type: string
      image:
        type: string
      section_id:
        example: 62b4c3789196e8a159933552
        type: string
      source_lang:
        example: VI
        type: string
      target_lang:
        example: EN
        type: string
      title:
        example: Greetings
        type: string
      updated_at:
        type: string
    type: object
  hub-service_module_score_model.UserScoreSummary:
    properties:
      average_score:
        type: number
      best_score:
        type: number
      total_challenges:
        type: integer
      total_score:
        type: number
      user_id:
        type: string
    type: object
  hub-service_module_section_model.Challenge:
    properties:
      category:
        type: string
      content:
        type: string
      created_at:
        type: string
      difficulty:
        type: string
      id:
        type: string
      section_id:
        type: string
      source_lang:
        type: string
      target_lang:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  hub-service_module_section_model.UserScoreSummary:
    properties:
      average_score:
        type: number
      best_score:
        type: number
      total_challenges:
        type: integer
      total_score:
        type: number
      user_id:
        type: string
    type: object
  hub-service_module_user_model.PaginationMetadata:
    properties:
      has_next:
        type: boolean
      has_prev:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total_items:
        type: integer
      total_pages:
        type: integer
    type: object
  model.ChallengeCreate:
    description: Required fields for creating a new translation challenge.
    properties:
      category:
        example: work
        type: string
      content:
        example: Hello, world!
        type: string
      difficulty:
        enum:
        - easy
        - medium
        - hard
        example: easy
        type: string
      image:
        type: string
      section_id:
        example: 62b4c3789196e8a159933552
        type: string
      source_lang:
        example: VI
        type: string
      target_lang:
        example: EN
        type: string
      title:
        example: Greetings
        type: string
    required:
    - content
    - difficulty
    - source_lang
    - target_lang
    - title
    type: object
  model.ChallengeScore:
    properties:
      attempt_count:
        type: integer
      best_score:
        type: number
      challenge_id:
        type: string
      challenge_title:
        type: string
      gemini_errors:
        type: string
      gemini_feedback:
        type: string
      gemini_suggestions:
        type: string
      last_attempt_at:
        type: string
      original_content:
        type: string
      user_translation:
        type: string
    type: object
  model.ChallengeUpdate:
    description: Fields available for updating a translation challenge. All fields
      are optional.
    properties:
      category:
        example: work
        type: string
      content:
        example: Good morning, everyone.
        minLength: 1
        type: string
      difficulty:
        enum:
        - easy
        - medium
        - hard
        example: easy
        type: string
      image:
        type: string
      section_id:
        example: 62b4c3789196e8a159933552
        type: string
      source_lang:
        example: VI
        maxLength: 2
        minLength: 2
        type: string
      target_lang:
        example: EN
        maxLength: 2
        minLength: 2
        type: string
      title:
        example: Formal Greetings
        minLength: 1
        type: string
    type: object
  model.DeleteUserResponse:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  model.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  model.GetUserResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserResponse'
      status:
        type: string
    type: object
  model.GetUserScoresAPIResponse:
    properties:
      data:
        $ref: '#/definitions/model.GetUserScoresResponse'
    type: object
  model.GetUserScoresResponse:
    properties:
      scores:
        items:
          $ref: '#/definitions/model.ChallengeScore'
        type: array
      summary:
        $ref: '#/definitions/hub-service_module_score_model.UserScoreSummary'
    type: object
  model.ListUsersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.UserResponse'
        type: array
      metadata:
        $ref: '#/definitions/hub-service_module_user_model.PaginationMetadata'
      status:
        type: string
    type: object
  model.LoginAPIResponse:
    properties:
      data:
        $ref: '#/definitions/model.LoginResponse'
      status:
        type: string
    type: object
  model.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
      user:
        $ref: '#/definitions/model.UserResponse'
    type: object
  model.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  model.Section:
    description: Section of a challenge containing title and content.
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      image:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.SectionCreate:
    description: Required fields for creating a new section.
    properties:
      content:
        type: string
      image:
        type: string
      title:
        type: string
    type: object
  model.SectionSimple:
    description: Simplified section containing only id and title for list operations
    properties:
      id:
        type: string
      title:
        type: string
    type: object
  model.SectionUpdate:
    description: Optional fields for updating a section.
    properties:
      content:
        type: string
      image:
        type: string
      title:
        type: string
    type: object
  model.SectionWithChallenges:
    properties:
      challenges:
        items:
          $ref: '#/definitions/hub-service_module_section_model.Challenge'
        type: array
      section:
        $ref: '#/definitions/model.Section'
      user_score:
        $ref: '#/definitions/hub-service_module_section_model.UserScoreSummary'
    type: object
  model.SectionWithScore:
    properties:
      section:
        $ref: '#/definitions/model.Section'
      user_score:
        $ref: '#/definitions/hub-service_module_section_model.UserScoreSummary'
    type: object
  model.SocialLoginRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      id_token:
        type: string
      name:
        type: string
      provider:
        type: string
      provider_id:
        type: string
    required:
    - email
    - id_token
    - name
    - provider
    - provider_id
    type: object
  model.UpdateRoleRequest:
    properties:
      email:
        type: string
      role:
        enum:
        - admin
        - client
        - super_admin
        type: string
    required:
    - email
    - role
    type: object
  model.UpdateUserResponse:
    properties:
      data:
        $ref: '#/definitions/model.UserResponse'
      status:
        type: string
    type: object
  model.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      total_score:
        description: Total score from all challenges
        example: 95.5
        type: number
      updated_at:
        type: string
    type: object
  model.UserUpdate:
    properties:
      avatar:
        type: string
      name:
        type: string
    type: object
  transport.Error:
    properties:
      correction:
        type: string
      description:
        type: string
      position:
        type: integer
      type:
        type: string
    type: object
  transport.GeminiScoreRequest:
    properties:
      challenge_id:
        type: string
      target_language:
        type: string
      user_translation:
        type: string
    required:
    - challenge_id
    - target_language
    - user_translation
    type: object
  transport.GeminiScoreResponse:
    properties:
      challenge_id:
        type: string
      created_at:
        type: integer
      errors:
        items:
          $ref: '#/definitions/transport.Error'
        type: array
      feedback:
        type: string
      score:
        type: number
      suggestions:
        items:
          type: string
        type: array
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample hub service API. You can enter your access token directly
    without 'Bearer ' prefix.
  title: Hub Service API
  version: "1.0"
paths:
  /api/challenges/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a translation challenge by its unique ID. Only admin and
        super_admin can access this endpoint.
      parameters:
      - description: Challenge ID (MongoDB ObjectID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "403":
          description: Forbidden - Only admin and super_admin can access
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Challenge not found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Delete a challenge
      tags:
      - challenges
    get:
      consumes:
      - application/json
      description: Retrieve the details of a specific translation challenge by its
        unique ID. All authenticated users can access this endpoint.
      parameters:
      - description: Challenge ID (MongoDB ObjectID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/hub-service_module_challenge_model.Challenge'
              type: object
        "400":
          description: Invalid ID format
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Challenge not found
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Get a challenge by ID
      tags:
      - challenges
    patch:
      consumes:
      - application/json
      description: Update the details of an existing translation challenge by its
        ID. Only admin and super_admin can access this endpoint.
      parameters:
      - description: Challenge ID (MongoDB ObjectID)
        in: path
        name: id
        required: true
        type: string
      - description: Challenge data to update
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/model.ChallengeUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Bad request or invalid ID format
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "403":
          description: Forbidden - Only admin and super_admin can access
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Challenge not found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Update a challenge
      tags:
      - challenges
  /api/challenges/create:
    post:
      consumes:
      - application/json
      description: Create a new translation challenge and store it in the database.
        Only admin and super_admin can access this endpoint.
      parameters:
      - description: Challenge data to create
        in: body
        name: challenge
        required: true
        schema:
          $ref: '#/definitions/model.ChallengeCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created. Returns the ID of the new challenge.
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "403":
          description: Forbidden - Only admin and super_admin can access
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Create a new challenge
      tags:
      - challenges
  /api/challenges/list:
    get:
      consumes:
      - application/json
      description: Get a list of translation challenges with pagination and search.
        All authenticated users can access this endpoint.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter by section ID
        in: query
        name: section_id
        type: string
      - description: Search in title and content (case-insensitive)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/hub-service_module_challenge_model.Challenge'
                  type: array
                meta:
                  $ref: '#/definitions/common.Paging'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: List challenges
      tags:
      - challenges
  /api/email/multiple:
    post:
      consumes:
      - application/json
      description: Send emails to multiple recipients
      parameters:
      - description: List of email data
        in: body
        name: emails
        required: true
        schema:
          $ref: '#/definitions/emailmodel.MultipleEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
      summary: Send multiple emails
      tags:
      - email
  /api/email/response-portfolio:
    post:
      consumes:
      - application/json
      description: Send a response email for portfolio inquiry
      parameters:
      - description: Response data
        in: body
        name: response
        required: true
        schema:
          $ref: '#/definitions/emailmodel.EmailResponsePortfolio'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
      summary: Response to portfolio inquiry
      tags:
      - email
  /api/email/single:
    post:
      consumes:
      - application/json
      description: Send an email to a single recipient
      parameters:
      - description: Email data
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/emailmodel.EmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
      summary: Send a single email
      tags:
      - email
  /api/scores/ai-translate:
    post:
      consumes:
      - application/json
      description: Analyzes user translation using Gemini AI for grammar, syntax,
        and language accuracy
      parameters:
      - description: Gemini scoring request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transport.GeminiScoreRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/transport.GeminiScoreResponse'
              type: object
        "400":
          description: Bad request - invalid input
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Challenge not found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Score and analyze grammar using Gemini AI
      tags:
      - scores
  /api/scores/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get detailed scores and summary for a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUserScoresAPIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Get user's scores for all challenges
      tags:
      - scores
  /api/sections/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a section and all its related challenges. Only admin and
        super_admin can access this endpoint.
      parameters:
      - description: Section ID
        example: '"62b4c3789196e8a159933552"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request - Invalid section ID
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "403":
          description: Forbidden - Only admin and super_admin can access
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Section not found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Delete a section
      tags:
      - sections
    get:
      consumes:
      - application/json
      description: Get a section with all its related challenges and user score. All
        authenticated users can access this endpoint.
      parameters:
      - description: Section ID
        example: '"62b4c3789196e8a159933552"'
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.SectionWithChallenges'
              type: object
        "400":
          description: Bad request - Invalid section ID
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Section not found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Get a section by ID
      tags:
      - sections
    patch:
      consumes:
      - application/json
      description: Update an existing section by ID. Only admin and super_admin can
        access this endpoint.
      parameters:
      - description: Section ID (MongoDB ObjectID)
        in: path
        name: id
        required: true
        type: string
      - description: Section data to update
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/model.SectionUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Bad request or invalid ID format
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "403":
          description: Forbidden - Only admin and super_admin can access
          schema:
            $ref: '#/definitions/common.AppError'
        "404":
          description: Section not found
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Update a section
      tags:
      - sections
  /api/sections/create:
    post:
      consumes:
      - application/json
      description: Create a new section for a challenge. Only admin and super_admin
        can access this endpoint.
      parameters:
      - description: Section data
        in: body
        name: section
        required: true
        schema:
          $ref: '#/definitions/model.SectionCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created. Returns the ID of the new section.
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "403":
          description: Forbidden - Only admin and super_admin can access
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Create a new section
      tags:
      - sections
  /api/sections/list:
    get:
      consumes:
      - application/json
      description: Get a list of sections with pagination, search by title and user
        scores. All authenticated users can access this endpoint.
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of items per page (default: 10)'
        in: query
        name: limit
        type: integer
      - description: Search by section title (case-insensitive)
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.SectionWithScore'
                  type: array
                meta:
                  $ref: '#/definitions/common.Paging'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Get a list of sections with pagination, search and user scores
      tags:
      - sections
  /api/sections/simple:
    get:
      consumes:
      - application/json
      description: Get all sections with only id and title, optionally filtered by
        title search. No pagination. All authenticated users can access this endpoint.
      parameters:
      - description: Search by section title (case-insensitive)
        in: query
        name: title
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.SectionSimple'
                  type: array
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Get all sections with only id and title
      tags:
      - sections
  /api/upload/r2-image:
    post:
      consumes:
      - multipart/form-data
      description: Upload image to R2, file sẽ được đổi tên thành UID duy nhất, trả
        về URL public qua Worker cho FE đọc.
      parameters:
      - description: Image file (jpg, jpeg, png, gif, webp, max 10MB)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Public image URL
          schema:
            allOf:
            - $ref: '#/definitions/common.Response'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/common.AppError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/common.AppError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/common.AppError'
      security:
      - BearerAuth: []
      summary: Upload image to Cloudflare R2
      tags:
      - upload
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DeleteUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user information by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UpdateUserResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - users
  /api/users/list:
    get:
      consumes:
      - application/json
      description: Get a list of users with pagination, sorting, and search
      parameters:
      - description: 'Page number (minimum: 1, default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Number of items per page (minimum: 1, maximum: 100, default:
          10)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - default: created_at
        description: Sort by field (name, email, created_at, updated_at)
        enum:
        - name
        - email
        - created_at
        - updated_at
        in: query
        name: sort_by
        type: string
      - default: desc
        description: Sort order (asc, desc)
        enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      - description: Search by name or email (case-insensitive)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns users list with pagination metadata
          schema:
            $ref: '#/definitions/model.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
  /api/users/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token and refresh token pair using a valid refresh
        token.
      parameters:
      - description: Refresh Token
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/model.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginAPIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Refresh access token
      tags:
      - users
  /api/users/set-role:
    patch:
      consumes:
      - application/json
      description: Update role of a user (super_admin only)
      parameters:
      - description: User email and new role
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user role
      tags:
      - users
  /api/users/social-login:
    post:
      consumes:
      - application/json
      description: Login or register user via Google OAuth
      parameters:
      - description: Social login info
        in: body
        name: social
        required: true
        schema:
          $ref: '#/definitions/model.SocialLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginAPIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.ErrorResponse'
      summary: Social login (Google)
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Enter your access token directly (without 'Bearer ' prefix). The
      system will automatically handle both formats.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
